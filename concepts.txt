               ▄▄                                              
▀████▀         ██                                              
  ██                                                           
  ██         ▀███     ▀████████▄     ▀███  ▀███     ▀██▀   ▀██▀
  ██           ██       ██    ██       ██    ██       ▀██ ▄█▀  
  ██     ▄     ██       ██    ██       ██    ██         ███    
  ██    ▄█     ██       ██    ██       ██    ██       ▄█▀ ██▄  
██████████   ▄████▄   ▄████  ████▄     ▀████▀███▄   ▄██▄   ▄██▄
                                                               
                                                               

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Introduction ~

Before moving on to the LINUX lets have a small talk ☕️
An operating system (OS) is system software that manages computer hardware, software resources, and provides common services for computer programs.
Lets take a look at 1969 its time when ken Thompson and Dennnis Ritchie created unix operating system its was all good but it had one problem the 
source code was owned by AT and T company when some other created their own software distribution based on unix AT and T sues them this led to the 
limitatiins to the development. 

To encounter this problen in year 1983 Richard Stallman created GNU( it literally means not unix 😂) project intended to make free and open source 
replacement to unix in 1992 it included linux under GNU project under general public license, linux was created in 1991 by linus Torwalds a 
kernel which act as a mediater between hardware and applications, user interact with kernel with the help of shell through command line. in GNU's 
upcomming years it created may tols and applications like tar, bash just the name of few which can be used by linux kernel that let to revolution 
in software world.

As it gave freedom to developers tonnes of developers made their contributions and created thousand of linux distro. A distro is a complete operating
system based on linux kernel which comes with linux kernel packages package-manager Graphic-user-interface. The family tree of linux is huge 
but have one thing in common the seed of linux with tools, utilities and freedom provided by GNU. 

We will be understanding the basics of linux topics like core-concepts package-manager file-system networking storage secuerity-filepermissions
and many more so keep it till end. 😀

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

lets understand linux architecture ~


                |--------------------------------------------------------------------------------------------------------|
                |                                                                                                        |
                |                                                  user                                                  |
                |                                                                                                        |
                |      |----------------------------------------|        |----------------------------------------|      |
                |      |                                                                                          |      |
                |      |                              Applications / System utilities                             |      |
                |      |                                                                                          |      |
                |      |       |--------------------------------------------------------------------------|       |      |
                |      |       |                                                                          |       |      |
                |      |       |                                   Shell                                  |       |      |
                |      |       |                                                                          |       |      |
                |      |       |       |-----------------------------------------------------------|      |       |      |
                |      |       |       |                                                           |      |       |      |
                |      |       |       |                           kernel                          |      |       |      |
                |      |       |       |                                                           |      |       |      |
                |      |       |       |       |-------------------------------------------|       |      |       |      |
                |      |       |       |       |                                           |       |      |       |      |
                |      |       |       |       |                  Hardware                 |       |      |       |      |
                |      |       |       |       |                                           |       |      |       |      |
                |      |       |       |       |-------------------------------------------|       |      |       |      |
                |      |       |       |                                                           |      |       |      |
                |      |       |       |-----------------------------------------------------------|      |       |      |
                |      |       |                                                                          |       |      |
                |      |       |                                                                          |       |      |
                |      |       |--------------------------------------------------------------------------|       |      |
                |      |                                                                                          |      |
                |      |                                                                                          |      |
                |      |------------------------------------------------------------------------------------------|      |
                |                                                                                                        |
                |                                                                                                        |
                |--------------------------------------------------------------------------------------------------------| 

yeah ! I made the above digram myself 😎

We use shell to communicate with kernel, which communicates with hardware so, we indirectly communicate with the hardware using shell
The user cannot communicate with shell using magical spells 😂 hence the user interact with UI(user Interface) to communicate and interact.
There are mainly two types of User interface -  1.command line user interface 2.Graphic user interface 
The GUI uses the graphics while the CLI uses the commands aka instructions. 

Now a questions may arise in your mind I have not encountered the command line user interface while using apps like file manager 
The thing is the those apps are interacting with shell for you under the hood while you use the app. 

To communicate and use the services we have to communicate with shell, as shell is CLI we will be exploring commands and concepts. 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Commands: syntax and type 

Syntax:
You may notice that the instructions have a multiple parts these pare can be divided into three parts 
1.command
2.options 
3.arguments
Syntax: command option argument 

Type:
Commands can be divided into two main type
1.Builtin 
2.External

👨🏽‍💻usage:To know type of command 
👨🏽‍💻type:type command 
👨🏽‍💻output:It will output the type of command 
👨🏽‍💻example:type echo

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Shell

As we discussed earlier we need to interact to with shell via commands so, lets start the shell topic 😉

There are different types of shell available exmaple bash shell corn shell z shell bourne shell (ment for unix) and many more these shells are 
different and may serve special purpose in specific fields, but all of them have one thing in common that they all act as a medium to interact with 
kernel. 

👨🏽‍💻usage:To know which shell we are working with 
👨🏽‍💻type:echo $SHELL
👨🏽‍💻output:/bin/bash OR /bin/zsh OR /bin/ksh OR any other shell that have been installed onto your system.  

👨🏽‍💻usage:To change shell         note: they must be installed in your system 
👨🏽‍💻type:chsh -s /bin/[ code name of the shell you wanna switch note: these square brackets are not needed these are just for instructing purpose]
👨🏽‍💻output:No effect but the shell will be changed but it will came into effect after you close the current session and start a new one.
👨🏽‍💻example:chsh -s /bin/bash

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

kernel ~

Kernel is major component of an opreating system its sits between hardware and applications/processes it manages resources as efficient as possible 
Kernel carries out four major tasks 

1.Memory management 
2.Process management 
3.Device drivers 
4.System calls and secuerity

The linux kernel is monolithic it means it carries out multiple tasks all by itself.
The linux kernel is modular it means it can extend its capiblities using dynamicially loaded kernel modules.

Lets check about kernel info 

👨🏽‍💻usage:To know the kernel info
👨🏽‍💻type:echo uname
👨🏽‍💻output:Name of the kernel will be printed 

👨🏽‍💻usage:To know the kernel info including the major version and minor version and patch release 
👨🏽‍💻type:echo uname -a 
👨🏽‍💻output:Info of the kernel will be printed
👨🏽‍💻example: 4.15.0-72-generic 
The first number tells about the current version
The second number tells about the major version
The third number tells about patch release 
The fourth word tells about the type of the kernel this is distro specific 

Kernel and user space ~

The memory is divided into two parts 1.kernel space and user space 
Kernel space is composed of device drivers and kernel they have unrestricted acecess to the hardware to kernel items like kernel code kernel 
extensions which executes and provides it services
User space is the second component of the main memory it have restricted acces to the hardware it comes with all kind of tools and programming 
languages graphical tools and other things like java ruby c python and docker containers etc.
All user programs function by manipulating data which comes from hardware like disk, user programs made special request to the kernel call system 
calls example open or write a file etc, this system call make kernel to provide resourcs to program. 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Command line help ~

👨🏽‍💻usage:To know about the flags of the command  
👨🏽‍💻type:COMMAND --help
👨🏽‍💻output:All the flags with little description of tags will be printed

👨🏽‍💻usage:To know about the commmand 
👨🏽‍💻type:man COMMAND
👨🏽‍💻output:Documentation of the comand will be printed
👨🏽‍💻More:There are chances that there are more than one type of documentation of a single command in that case provide the section like ~ man 1,2 command 
These section type can be seen by typing man man command 

👨🏽‍💻usage:To get command from the little description  
👨🏽‍💻type:apropos SMALL-DESCRIPTION
👨🏽‍💻output:All the command mannual that contains the small exact description provided will be printed 
👨🏽‍💻More:This command may print extra stuff like manuall of other utilities that contain the description provided to make this more reliable for 
this -s flag is used for sections for example the command manualls are found from section 1 to 8 so the more reliable way to find connad is 
apropos -s 1,8 SMALL-DESCRIPTION

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Linux boot sequence ~
Although you have have booted your system and are working on it 🌚 lets discusss a steps involved in this task 

Linux boot sequence can be divided into four major groups ~
1. BIOS post
2. GRUB loader/ Boot loader 
3. Kernel initilization
4. INTIT process (systemd)

BIOS POST ~
POST(Power On Self Test) in this stage BIOS runs a post test to insure that all the hardware components attached to the device are working correctly
if POST fails compuetr may not be operatble and computer will not move to second step of boot process. 

Boot loader ~
After the POST sequence BIOS load and executes the boot code from the hard disk of the boot device, located in the first sector of the hard disk  
In linux this code os located in the /boot file system The boot loader provide user with the boot screen often  with multiple os to boot into.
Once the choice is provided the boot loader loades the kernel into the memory. Supplying with parameters and handling the control to the kernel 
Example of the boot loader is GRUB 2(Grand Unified Boot Loader version 2) it is primary boot loader for most of the linux distributions.

Kernel Initilization ~
The kernel loaded into the memory is usually decompressed then the kernel loads into the memory and starts executing during this time kernel carries 
out tasks such as initilizing hardware, cpu sheduling and memory management etc.

INIT ~
When the kernel gets compleateately operational kernel goes for INIT process, this process sets up user space and processes needed for user environment.

In most of the linux distributions INIT process later calls the systemd, it is responsible for bringing linux host into the useable space, mounting
filesystems starting and managing system services like systemd and sys5. Systemd has one advantage than sys5 is that it paralizes the services 
which are not necessary thus decreasing the startup time 

👨🏽‍💻usage:To know the the INIT process used 
👨🏽‍💻type:ls -l /sbin/init
👨🏽‍💻output:Name of the init process used will be printed

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Runlevel ~
Run level in a nutshell can be defined as user target implemented on the system i.e interface your system boots into , during boot process it checks
the run level and insures that all services that are required for the runlevel are working fine.

There are various kind of run level implemented on the system list of them are ~
runlevel 0 -> poweroff.target

runlevel 1 -> rescue.target

runlevel 2 -> multi-user.target

runlevel 3 -> multi-user.target

runlevel 4 -> multi-user.target

runlevel 5 -> graphical.target

runlevel 6 -> reboot.target

👨🏽‍💻usage:To know the the current runlevel
👨🏽‍💻type:systemctl get-default
👨🏽‍💻output:The target of the system will be printed 

👨🏽‍💻usage:To know the the current runlevel
👨🏽‍💻type:systemctl set-default DESIRED-TARGET-NAME.target
👨🏽‍💻output:The target of the system will changed according to the target provided. 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Working with hardware ~

👨🏽‍💻usage:To get messages generated by the kernel 
👨🏽‍💻type:dmesg
👨🏽‍💻output:When an operatin g system boots ucp there are tonnes of messages generated by the kernel that appear on the screen these messages contains 
logs and other informational stuff this command will make print all those messages.

👨🏽‍💻usage:Prints about the messages of uevents generated by the kernel 
👨🏽‍💻type:udevadm monitor 
👨🏽‍💻output:This listens to the kernel uevents and upon decting an event it prints the details onto the screen. 

👨🏽‍💻usage:List all pci devices that are configured to the system along with their information
👨🏽‍💻type:lspci
👨🏽‍💻output:This command will print information of the all pci(Peripheral Component Interconnects primary purpose is to facilitate communication of 
hardware devices of all types such as audio, video, network or graphics with the microprocessor) devices that are configured in the system.

👨🏽‍💻usage:List all the block devices along with their information  
👨🏽‍💻type:lsblk
👨🏽‍💻output: List all the block devicecs along with their information.

👨🏽‍💻usage:To get information about cpu architecture 
👨🏽‍💻type:lscpu
👨🏽‍💻output:information including no of core,threads,sockets and generation etc will be printed on the screen. 

👨🏽‍💻usage:List the information about memory
👨🏽‍💻type:lsmem --summary
👨🏽‍💻output:Print the summary of the memory i.e how much ram is occuied and how much ram is free there and another command that do the same thing ~
free -m 
👨🏽‍💻note:In the above command -m is used to get information in megabytes -g can be used to get information in gigabytes and -k is used to get information 
in kili bytes can be used along with size options to get small summary. 

👨🏽‍💻usage:To get information about hardware
👨🏽‍💻type:lshw
👨🏽‍💻output:This command will print all the  information about hardware configure on to the system.

👨🏽‍💻usage:To get the root user privilages  
👨🏽‍💻type:sudo COMMAND 
👨🏽‍💻output: There are so many command that require root user privilages to run gosh there a easy methos use sudo before command to get root privilages
every time you use sudo password is required  

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

File ~

There's a commom phrase in linux that everything is a file so it is necessary to get really handy on em' 

File in linux are divided into 3 types 
1.Regular
2.Directory
3.Special

1.Regular files are the most basic files in linux they are data files or media files or scripts 
2.Directories are the files that store other files or directories 
3.Special files are further divided into 5 types 
3.1 Character files - these files represent devices under /dev that allows OS to communicate with IO devices   example - mouse
3.2 Block files - These files represent block devices under /dev a block device read from and write in block/chunk of data  example - hard disk, ram 
3.3 Links - these files are the way to associate two or more file name with same set of file data there are two types of links 
3.3.1 Hard Link - two or more files name that share the same block of data on a physical disk although they behave as a independent files deleting one 
link will delete the data 
3.3.2 Soft link - They act as pointers to another files deleting a soft link will not delete the actual file 
3.4 Socket - These file enable communication between two processes 
3.5 named pipes - These files are allows one process as the input to another Data flow in pipe is unidirectional 

File types and their identifiers 

  |------------------------------------|
  |  File               | identifiers  |
  |  Directory          |    d         |
  |  Regular            |    -         |
  |  Link               |    l         |
  |  Socket             |    s         |
  |  Pipe               |    p         |
  |  Character device   |    c         |
  |------------------------------------|


👨🏽‍💻usage:To check the file type 
👨🏽‍💻type:file FILENAME-INCLUDING-FILE-FORMAT-IF-PRESENT
👨🏽‍💻output:the file type 
👨🏽‍💻example:file ~

Lets talk about file hiearchy in directories 


                                                             /(root)
                                                                |
                                                                |                                       
       ----------------------------------------------------------------------------------------------------------------------------------    
       |           |           |           |           |           |           |           |           |           |         |          |
       |           |           |           |           |           |           |           |           |           |         |          |
     /bin        /boot       /dev        /etc        /home       /lib       /media       /mnt        /opt        /tmp      /usr       /var

As we discussed above everything is a file in linux in linux there's a hiearchy of files in linux aka hiearchy of directories 
every directory has a parent directory except root directory from which all directories are being born off. When you open terminal you are found
to be in your home directory. this '/' represent parent the of a directory have a syntax like /parent1/parent1.1/parent1.1.1/........

👨🏽‍💻usage:To check the home directory 
👨🏽‍💻type:echo $HOME
👨🏽‍💻output:outputs the home directory
👨🏽‍💻example:echo $HOME
👨🏽‍💻note:home directory can be redirected simply by typing- cd or by typing- cd ~ or by typing- cd $HOME For single person there's only a only directory
under /home directory but for multi user there can be many directories under /home directory 

👨🏽‍💻usage:To check the current directory you are on 
👨🏽‍💻type:pwd
👨🏽‍💻output:outputs the current working directory
👨🏽‍💻example:pwd

👨🏽‍💻usage:To list the content of directories
👨🏽‍💻type:ls
👨🏽‍💻output:outputs the content of working directory
👨🏽‍💻example:ls
👨🏽‍💻note:Multiple options can be used with this command like l for long list a for mentioning hidden files r for reverse order example ls -la

👨🏽‍💻usage:To switch directory 
👨🏽‍💻type:cd DIRECTORY-NAME
👨🏽‍💻output:switches to the directory you have typed 
👨🏽‍💻example:cd Desktop
👨🏽‍💻note:You cannot switch to any directory anywhere you wanted the directory you are switching to and the directory you are currently on must belong 
to the same parent, or you may provide absolute path of the intended directory 

👨🏽‍💻usage:To switch to parent of the current working directory  to traverse back of the hiearchy
👨🏽‍💻type:cd ..
👨🏽‍💻output:switches to the parent directory
👨🏽‍💻example:cd ..
👨🏽‍💻note:You can move back to parent directory till it reaches the root directory because root directory is the Adam of all directories 😂 you can 
also switch back by typing cd with the exact location of the parent directory 

👨🏽‍💻usage:To create directory
👨🏽‍💻type:mkdir DIRECTORY-NAME-AS-PER-AS-YOUR-CHOICE
👨🏽‍💻output:directory of the provided name will be created under its parent directory
👨🏽‍💻example:mkdir mydirectory
👨🏽‍💻note:it is adviced to not to use space inbetween the name of the directory.

👨🏽‍💻usage:To create files except directory
👨🏽‍💻type:touch DESIIRED-FILENAME.DESIRED-FILE-FORMAT
👨🏽‍💻output:The file with given name and format will be created under the current working directory
👨🏽‍💻example:touch myfile.txt

👨🏽‍💻usage:To delete directory
👨🏽‍💻type:rm -r DIRECTORY-NAME-YOU-WANNA-DELETE
👨🏽‍💻output:All content inside the directory and the directory itself will be deleated 
👨🏽‍💻example:rmdir mydirectory
👨🏽‍💻note:to delete files except directory there's no neeed of -r this -r is ment for recursive purpose 

👨🏽‍💻usage:To move a file or directory
👨🏽‍💻type:mv loation of the file which is to be transfered location of parent directory where it is to be transfered
👨🏽‍💻output:The file or dictory will be moved at the same time 
👨🏽‍💻example:rmdir mv a/b/c/4  /1/2/3/
👨🏽‍💻note: If the both location are same but the file name is different in that case the moving file or directory will be renamed as per as second name

👨🏽‍💻usage:To copy a file or directory
👨🏽‍💻type:cp loation of the file which is to be copied location of parent directory where it is to be copied 
👨🏽‍💻output:The file or dictory will be copied at the same time 
👨🏽‍💻example:cp a/b/c/d  /a/b/c/
👨🏽‍💻note: There might be a case when there are so much directory/file under the copying directory/file in that case -r can be used.

👨🏽‍💻usage:To view the meta data of the file 
👨🏽‍💻type:stat FILENAME.FILEFORMAT
👨🏽‍💻output:All the data related to the file will be printed 

Soft link and hardlink 
File points to the inode and innode points to the group of data. There might be chances that one or more that one person wanna access same data 
but might lie in different directories in that case the one usual way is to copy all the data form orignal to source that will result in storage
blunder in that case links are highly useful one or more user can have access to same data without blundering the storage 

👨🏽‍💻usage:To create a hard link
👨🏽‍💻type:ln PATH_TO_OLD_DATA PATH_TO_NEW_LINK
👨🏽‍💻output:Link will be created but its hard manipulation of data on one size will not result in changes on both sides, talking about how it workds
both the names points to same inode, hardlink limitations are ~ Hard links can only be formed for files not directories, file system dependincy

Soft link points to the path to the file all the stuff for making soft link is almost same but with a difference of -s flag
to view the true path of the link created readlink command is used permissions of softlink are kinda useless 





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Package Manager ~

Package:
A package is a archive/files all the files that are required by a particular software. A package manager is a software that provides package + 
dependencies along with tasks like ~ Checking authenticity and integrity, Simplying the package management process, Grouping packages, Managing dependicies 

Every distributions may have a seperate package manager because distributions may differ in basic structure thus every different structure require 
different package manager Just like we talked earlier there are around a thousand of linux distributions but the big daddy of these distributions are 
DPKG/APT and RPM/YUM. DPKG is used by linux os like ubantu, debian, arch linux linux mint etc. RPM is used bu RHEL,fedora,cent os etc. The most usual package 
manager used by mac os is home brew. 

RPM(red hat package manager) ~

                                   --------------------------------------------
                                   |  install   |   rpm -ivh packagename.rpm  |
                                   |  unistall  |   rpm -e packagename.rpm    |
                                   |  upgrade   |   rpm -Uvh packagename.rpm  |
                                   |  query     |   rpm -q packagename.rpm    |
                                   |  verify    |   rpm -Vf path-to-file      |
                                   --------------------------------------------

YUM(yellow dog updater modifier) ~

Despite all of these RPM does not manage dependencies by itself so we need a better package manager hopefully there a package manager called YUM this 
package manager works on RPM based distros It is a high level package manager but still works with RPM under the hood. YUM deals with automatic 
dependencies management. 

To install dependencies it works with dependencies packages they may stored on local or are available on remote server accessed via server protocalls.
In your loacal system you can find those dependicies file on etc/yum.repos.d/dependencies-files you can adde any dependicies file here in case you wanna 
install unofficial updates of any modifications.

👨🏽‍💻usage:To list all the installed repos
👨🏽‍💻type:yum repolist
👨🏽‍💻output:All the repos added to the system will be displayed 
👨🏽‍💻example:yum repolist

👨🏽‍💻usage:To find what dependencies is provided to a application 
👨🏽‍💻type:yum provides DESIRED-SERVICE-OR-UTILITY 
👨🏽‍💻output:All the dependencies or packages provided to the application will be displayed.
👨🏽‍💻example:yum provides scp 

                                   ----------------------------------------------
                                   |  install   |   yum install packagename     |
                                   |  unistall  |   yum remove packagename      |
                                   |  update    |   yum update packagename      |
                                   ----------------------------------------------

Steps involved in installing a package ~
yum first checks the transaction check it check repositories of that package it also check if any of the dependincy package installed in system 
or it needs to be upgraded. After all that it displays transaction summary and asks the choice to further go on. After that choice yum downloads 
the packages.

DPKG(debian package manager) ~

                                   --------------------------------------------
                                   |  install   |   dpkg -i packagename.deb   |
                                   |  unistall  |   dpkg -r packagename.deb   |
                                   |   list     |   dpkg -l packagename       |
                                   |  status    |   dpkg -s packagename       |
                                   |  verify    |   dpkg -p path to package   |
                                   --------------------------------------------

Just like RPM it does not handle dependencies on its own so a better package manager is required just like YUM which works with dpkg under the hood.

apt(advance package manager) ~
To install dependencies it can be done by packages stored on local or it may install from remote server by connection using server protocalls its 
packages can be find at /etc/sources.list/ 

                                   ---------------------------------------------------
                                   |  install        |   apt install packagename     |
                                   |  unistall       |   apt remove packagename      |
                                   |  referesh repo  |   apt update                  |
                                   | install upgrade |   apt upgrade                 |
                                   |  search         |   apt search packagename      |
                                   |  upgrade 2.0    |   apt edit-sources            |
                                   ---------------------------------------------------

APT vs APT-GET ~

APT is more user friendly than apt-get as apt-ge3t prints more details that are not necessary and are useless.  
                                  
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

File compression and archive ~

Checking disk usage ~

👨🏽‍💻usage:To check the size of file 
👨🏽‍💻type:du -sh FILENAME-FILEFORMAT
👨🏽‍💻output:outputs the the size of the file in human readable format
👨🏽‍💻example:98M shit.txt
👨🏽‍💻note: Multiple options can be used like -g for getting file size in gigabytes -m getting file size in megabytes -k getting file size in kilobytes 

File archival ~

TAR is used to group multiple directories and file into single tar file aka taped archive. 

👨🏽‍💻usage:To archive data 
👨🏽‍💻type:tar -cf DESIRED-COMPRESSED-FINAL-FILE-NAME.tar file1 file2 file3 
👨🏽‍💻output:All data will be archived and made into a new file named given by you with an extension of .tar 
👨🏽‍💻example:tar -cf  secrets.tar nukes.txt hitlernumber.txt 
👨🏽‍💻note: -c option is used for compressing files and -f is used for specifying the name of compressed file  

👨🏽‍💻usage:To display the contents of the archive file 
👨🏽‍💻type:tar -tf FILENAME.tar
👨🏽‍💻output:Files and folders that tar file composed of will be printed 
👨🏽‍💻example:tar -tf secrets.tar 

👨🏽‍💻usage:To extract the tar file 
👨🏽‍💻type:tar -xf FILENAME.tar
👨🏽‍💻output:Files and folders that tar file composed will be extracted
👨🏽‍💻example:tar -xf  secrets.tar

👨🏽‍💻usage:To archive data with reduction in size of tar file 
👨🏽‍💻type:tar -zcf DESIRED-COMPRESSED-FINAL-FILE-NAME.tar file1 file2 file3 
👨🏽‍💻output:All data will be archived and made into a new file named given by you with an extension of .tar 
👨🏽‍💻example:tar -zcf  secrets.tar nukes.txt hitlernumber.txt 
👨🏽‍💻note: -c option is used for compressing files and -f for file name -z for compression.

File compression ~

Apart from archival there are various ways to compress a file based on different algorithms there are multiple commands they do not work on directory.

👨🏽‍💻usage:To compress a file using bzip
👨🏽‍💻type:bzip2 FILENAME.FILEFORMAT
👨🏽‍💻output:compressed file will be saved and with a extra extension of bz2
👨🏽‍💻example:bzip2 compressed.txt

👨🏽‍💻usage:To decompress a bzip2 file 
👨🏽‍💻type:bunzip2 FILENAME.FILEFORMAT.bz2
👨🏽‍💻output:file will be decompressed  
👨🏽‍💻example:bunzip2 compressed.txt.bz2

👨🏽‍💻usage:To compress a file using gzip
👨🏽‍💻type:gzip FILENAME.FILEFORMAT
👨🏽‍💻output:compressed file will be saved and with a extra extension of gz
👨🏽‍💻example:gzip compressed.txt

👨🏽‍💻usage:To decompress a file using gzip
👨🏽‍💻type:gunzip FILENAME.FILEFORMAT.gz
👨🏽‍💻output:file will be decompressed 
👨🏽‍💻example:gunzip compressed.txt.gz

👨🏽‍💻usage:To compress a file using xz
👨🏽‍💻type:xz FILENAME.FILEFORMAT
👨🏽‍💻output:compressed file will be saved and with a extra extension of xz
👨🏽‍💻example:xz compressed.txt

👨🏽‍💻usage:To decompress a xz file 
👨🏽‍💻type:unxz FILENAME.FILEFORMAT.xz
👨🏽‍💻output:file will be decompressed
👨🏽‍💻example:unxz compressed.txt.xz

There is no need of everytime decompressing a file to read its content it can be done using command like zcat / bzcat / xzcat with file as an argument


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

locate file ~

👨🏽‍💻usage:To locate a file  
👨🏽‍💻type:locate FILENAME.FILEFORMAT
👨🏽‍💻output:All the files that share the same name heir paths will be printed 
👨🏽‍💻example:locate 1.1.txt
👨🏽‍💻note:It may not work on systems files because it is base on database to update the data base of the locations type updatedb command which command 
can also be used in pace of locate in case you wanna search system files.

👨🏽‍💻usage:To locate a file  
👨🏽‍💻type:find DIRECTORY-IN-WHICH-YOU-WANNA-SEARCH -name FILENAME.FILEFORMAT
👨🏽‍💻output:All the files that share the same name heir paths will be printed 
👨🏽‍💻example:find akashagarwal -name 1.1.txt

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Search data in files ~

👨🏽‍💻usage:To search data in a file  
👨🏽‍💻type:grep data FILENAME.FILEFORMAT
👨🏽‍💻output:All the lines that contains the provided data will print. 
👨🏽‍💻example:gerp second 1.1.txt

👨🏽‍💻usage:To search data in a file  regardless its case sesnitivity
👨🏽‍💻type:grep -i DATA FILENAME.FILEFORMAT
👨🏽‍💻output:All the lines that contains the provided data will print. 
👨🏽‍💻example:gerp -i second 1.1.txt

👨🏽‍💻usage:To search files that contains the data recursively in all the files in the parent directory. 
👨🏽‍💻type:grep -r "DATA" DIRECTORY-IN-WHICH-YOU-WANNA-SEARCH
👨🏽‍💻output:All the files that contains the provided data will print. 
👨🏽‍💻example:gerp -r "second" /nuclearcodes/asia

👨🏽‍💻usage:To search lines that do not contains the data provided  
👨🏽‍💻type:grep -v "DATA" FILENAME.FILEFORMAT
👨🏽‍💻output:All the lines that do not contains the provided data will print. 
👨🏽‍💻example:gerp -v "sixtynine" codes.txt

All these above data searching command have one thing in common that they print the lines/files that conatins even a part of data provided 
to make things more specific -w option is used 

👨🏽‍💻usage:To search line that contains the exact provided data.
👨🏽‍💻type:grep -w DATA FILENAME.FILEFORMAT
👨🏽‍💻output:All the line contains the exact provided data will print. 
👨🏽‍💻example:gerp -w zerozeroseven codes.txt

There might be a case you wanna se what line lies above the answer or what lines below the answer to fulfil this wish -A and -B options was born 

👨🏽‍💻usage:To print the n number of lines above the desired index being completely independent of the pattern searched 
👨🏽‍💻type:grep -A(NUMBER-OF-LINES-YOU-WANNA-PRINT-ABOVE) data FILENAME.FILEFORMAT
👨🏽‍💻output:All the line contains the provided data will print along with the numbers of lines provided will print above it. 
👨🏽‍💻example:gerp -A1 zerozeroseven codes.txt

👨🏽‍💻usage:To print the n number of lines below the desired index being completely independent of the pattern searched 
👨🏽‍💻type:grep -B(NUMBER-OF-LINES-YOU-WANNA-PRINT-BELOW) data FILENAME.FILEFORMAT
👨🏽‍💻output:All the line contains the provided data will print along with the numbers of lines provided will print below it. 
👨🏽‍💻example:gerp -B1 zerozeroseven codes.txt

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IO direction ~

There are three data streams created when a command is launched 

Standard input - This stream accepts text as its input 
Standard output - The output generated is delived by this stream 
Standard error - This stream delivers in case the given command is incorrect 

👨🏽‍💻usage:To redirect the output and store in it a file 
👨🏽‍💻type:echo "data" > FILENAME.FILEFORMAT 
👨🏽‍💻output:The data in the doubble quotes will overwrite the previous data and get store in the given file  
👨🏽‍💻example:echo "420690071945" > nuclearcode.txt
👨🏽‍💻note:This > will overwrite the data with the given data to make previous data immmutable >> can be used if the file does not exist a new one will be 
created 

👨🏽‍💻usage:To redirect the input to store in a file  
👨🏽‍💻type:cat > FILENAME.FILEFORMAT 
👨🏽‍💻output:After this command given there will free typing to exit that free typing type control+c all the contents will be saved 
👨🏽‍💻example:cat > nuclearcode.txt
👨🏽‍💻note:This > will overwrite the data with the given data to make previous data immmutable >> can be used if the file does not exist a new one will be 
created 

👨🏽‍💻usage:To redirect the output of the wrong command in a file
👨🏽‍💻type:cat ERROR-CAUSING-COMMAND 2> FILENAME.FILEFORMAT
👨🏽‍💻output:The error generated by the given command will be saved to the file 
👨🏽‍💻example:cat launch 2> nuclearcode.txt
👨🏽‍💻note:This > will overwrite the data with the given data to make previous data immmutable >> can be used if the file does not exist a new one will be 
created 

We can make output of one command to the input for the second in a nutshell piplining

👨🏽‍💻usage:To execute merege two command  
👨🏽‍💻type:command1 | command2
👨🏽‍💻output:If the output of the first command is suitable for the second both will execute
👨🏽‍💻example: grep -i no 1.1.txt | less

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Console based text editors ~

The real chads uses the console base text editors like vi editor 

👨🏽‍💻usage:To see the contents of a file in vi editor 
👨🏽‍💻type:vi FILENAME.FILEFORMAT
👨🏽‍💻output:All the data of the file will print in the vi editor 
👨🏽‍💻example:vi nuclearcodes.txt

The legendary vi editor have three modes 
Command - the default mode in vi editor is command move we can type command such as cp mv etc 
Insert  - this mode allows us to edit data aka add test delete text 
Last line - After getting our work done press esc key and : to switch to last line ~~ the escape key makes user go into command mode and :
takes user to last line. after reaching the last line we have options either to save/discard and exit vi editor 

Command mode : 
Press escape key for entering into command mode 
Lets gets handy with the comand mode ~
arrow up/k     for cursor up 
arrow down/j   for cursor down
arrow left/h   for cursor left 
arrow right/l  for cursor right
To copy and paste a line just press y two times on the first alphabet of the desired line and press p on desired place where you want to paste it.
To delete a letter just press x on the highlighted cursor
To delete the desired line just press d two times on the first alphabet of that line 
To delete the number of lines including the current type d n d   (n is the number of lines)
To redo the task press ctrl+r 
To undo the task press u 
To move cursor to the searched or desired part press /sequence-of-Character to search pattern above type ?sequence-of-Character
To find the above pattern above he current line press N and for the below press n

Insert mode :
Press i to enter into insert mode or o or a 
To make any changes first going into command mode is necessary 
To save the changes after editing press ~ escape : w
To save the changes and extit press ~ escape : wq 
To exit without making changes press ~ escape : q !

The real sigma males uses vim editor Vim is the dad of vi in terms of qualities it includes spell check, plugins, comparison, merging, gui etc. 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Secuerity and file permissions ~

Every user in linux has an account associated with linux aka have an user name and a password apart from both of these user also have a uid 
you can find these informaton in /etc/passwd , A group of users that share the same system can be grouped together this group is found in /etc/group
The users in the group have a unique GID If the user is not a part if any group the user is added to a group with same GID as UID.
Sudo is used to get super user privilages the powers provided can be edited as the description of it lies in the /etc/sudoers 

👨🏽‍💻usage:To get information about user 
👨🏽‍💻type:id
👨🏽‍💻output:The name ID GID and groups in which user a part of will be printed 
👨🏽‍💻example:id

Account types ~
User account: used by user 
Super user account: root UID=0
System accounts: created and used by the system and not find under home directory UID<100 or 500-1000
service accounts: accounts used by services 

👨🏽‍💻usage:To get to know about account which is logged into the system 
👨🏽‍💻type:whoami
👨🏽‍💻output:The accounts loggged into the computer will print
👨🏽‍💻example:whoami

👨🏽‍💻usage:To get record of the all logged in users 
👨🏽‍💻type:last
👨🏽‍💻output:The accounts that previously loggged into the computer will print
👨🏽‍💻example:last

Account management ~

As we discussed earlier that every user have a uid gid passwd at the same time may or maybe part of other groups there are commands to manage users 

👨🏽‍💻usage:To add another user to the system 
👨🏽‍💻type:useradd DESIRED-USER-NAME
👨🏽‍💻output:The user will be added to the system it can be seen uder /etc/passwd at default that account will be provided with GID and UID 
👨🏽‍💻example:useradd myselfakashagarwal 
👨🏽‍💻note:once logged in user can check itself by typing whoami 

The adding a user to the system is done above is the simplest way there's the correct more advanced way to do it with custom UID and GID and 
many more 

👨🏽‍💻usage:To add another user to the system 
👨🏽‍💻type:useradd -u CUSTOM-UID -g CUSTOM-GID -d /CUSTOM-DIRECTORY -s /bin/CUSTOM-SHELL -c "CUSTOM-COMMNETS" DESIRED-USER-NAME 
👨🏽‍💻output:The user will be added to the system it can be seen uder /etc/passwd at default that account will be provided with GID and UID 
👨🏽‍💻example:useradd myselfakashagarwal 
👨🏽‍💻note:once logged in user can check itself by typing whoami 

-u is used for giving custom UID to user example 69,420,1945,2002 aka user defined 
-g is used for giving custom GID to user example 69,420,1945,2002 aka user defined
-d is used for providing the custom home directory example /home/users/myselfakashagarwal
-s is used for providing the default shell example /bin/bash, /bin/sh, /bin/zsh 
-c is used for custom comments 
others can also be used like 
-e is used for expiration date 
-G is used for creating a user with multiple secondary groups 
at last there's name of the user  

If you wanna see the details of the user just grep -i DESIRED-USER-NAME /etc/passwd

👨🏽‍💻usage:To remove user from the system 
👨🏽‍💻type:userdel DESIRED-USER-NAME 
👨🏽‍💻output:That user will be deleated 
👨🏽‍💻example:userdel god

👨🏽‍💻usage:To add a group to the system 
👨🏽‍💻type:groupadd -g CUSTOM-GID GROUP-NAME  
👨🏽‍💻output:Group will be created with the given GID and name.
👨🏽‍💻example:groupadd -g 1983 GNU

👨🏽‍💻usage:To remove group from the system 
👨🏽‍💻type:groupdel DESIRED-GROUP-NAME 
👨🏽‍💻output:That group will be deleated 
👨🏽‍💻example:groupdel AT&T

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Access control files ~

Majority of access control files aree stored in /etc directory read:everyone write:root 

/etc/passwd 
This file contains the information about the user and the system including UID GID HOME SHELL GROUPS but this file does not contain passwords there 
are multiple feilds seperated by ' : ' 

USERNAME:PASSWORD:UID:GID:GECOS:HOMEDIR:SHELL
USERNAME~Name of the user using the system 
PASSWORD~x aka this field resemble x as the password is stored in /etc/shadow 
UID~User id of the user 
GID~Group id of the user 
GECOS~This is exceptional this may store user details like phone number etc 
HOMEDIR~This field represent location of home directory of the user 
SHELL~This field represent the default shell used by the user  

/etc/shadow 
Passwords are stored in this file they are not readable aka contents of this file are hashed feilds in /etc/shadow the fields are seperated by ' : '

USERNAME:PASSWORD:LASTCHANGE:MINAGE:MAXAGE:WARN:INACTIVE:EXPDATE
USERNAME~User name of the user 
PASSWORD~Password of the user but in hashed format @empty field means the passwd was never set for the user 
LASTCHANGE~The date since the user last changed its password (the date format is in epic )
MINAGE~The minimum number of days user have to wait to reset the password 
MAXAGE~The maximum number of days the current pasword will last 
WARN:The number of days remaining till this password will last 
INACTIVE~The number of days even after the expiray of the passwd that password will be accepted 
EXPDATE~Date at which the user account will be expired 

/etc/group 
This file stores all the information of the groups like GID MEMBERS fields of this file are ~
NAME~Group name 
PASSWORD~Password of the user indicating x 
GID~Group id 
MEMBERS~Members the group is part of 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

File permissions and ownership ~

File permissions ~

You probbably have seen this drwxr-xr-x kinda things after you list a file aka ls -l this drwxr-xr-x have describes many things including file type 
first letter of this line describes the type of file in this case it is a directory 
The next three letters represent read(r) write(w) execute(e) permissions provided to the user 
The next three letters after user's permissions represent read(r) write(w) execute(e) permissions provided to the Group
The last letters determine permissions to the other sources 

If there is - instead of r/w/x it means that that particular account does not have that particular r/w/x access the octal value of these permissions 
are read =4 write =2 execute =1 none(-)=0 .  If the user is not the owner of the file the group permissions are allowed The permission are represented
by the sum of the octal values 

👨🏽‍💻usage:To modify permissions of the file  
👨🏽‍💻type:chmod USER--WHOSE-PERMISSIONS-ARE-MODIFIED+/-PERMISSIONS FILENAME.FILEFORMAT
👨🏽‍💻output:Permissions will be modified 
👨🏽‍💻example:chmod u+rwx nuclearcodes.txt
👨🏽‍💻note:Taking example of the above command this + represent that permissions are provided in case of removal of permissions - is used, similarly 
in the above example u represent the user aka whose permissions are modified this can also be group represented by g or others represented by o or 
can be together at the same time. example chmod go+rwx nuclearcode.txt these permissions cab be grouped by using a comma example ~
chmod g+rwx,o-rwx,u+rwx nuclearcodes.txt 

There if you wanna apply same permissions to all types of account 
chmod 777 FILENAME.FILEFORMAT       to provide read write and execute permissions to all kinds of account 
chmod 555 FILENAME.FILEFORMAT       to provide read and execute permissions to all kinds of account 
chmod 660 FILENAME.FILEFORMAT       to provide read and write access to owner and no access to others 
chmod 750 FILENAME.FILEFORMAT       to provide all permissions to user and read and write permissions to group and no permissions to other 

File ownership ~ 

👨🏽‍💻usage:To change the ownership to the user and the group of the file 
👨🏽‍💻type:chown user-to-transer-ownership:group-to-transfer-ownership  FILENAME.FILEFORMAT
👨🏽‍💻output:Ownership will be provided to the provided user and group 
👨🏽‍💻example:chown India:asia nuclearcodes.txt

👨🏽‍💻usage:To provide ownership only to user no changes provided to the group
👨🏽‍💻type:chown india nuclearcodes.txt
👨🏽‍💻output:User will also get the ownership of the file and the ownership of the group remain default
👨🏽‍💻example:groupdel AT&T

👨🏽‍💻usage:To change ownership of the group 
👨🏽‍💻type:chgrp group-name FILENAME.FILEFORMAT
👨🏽‍💻output:Ownership of the group will change and the ownership of the user remain default
👨🏽‍💻example:chgrp asia FILENAME.FILEFORMAT 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SSH and SCP ~

SSH ~

SSH is used for login and executing commands on a remote server via local system

👨🏽‍💻usage:To find port used  
👨🏽‍💻type:netstat -ntlp | grep ssh

👨🏽‍💻usage:To connect to remote server via ssh 
👨🏽‍💻type:ssh SERVER-IP
👨🏽‍💻note:incase no user is specified the connection is obtained by the logged-in user 

👨🏽‍💻usage:To connect to remote server via ssh 
👨🏽‍💻type:ssh USER-ACCOUNT-ON-REMOTE-SERVER@HOST-NAME-OR-IP-ADDRESS-OF-SERVER

👨🏽‍💻usage:To connect to remote server via ssh 
👨🏽‍💻type:ssh -l USER HOST-NAME-OR-IP-ADDRESS

The thing is these remote logins require id and password there is another way to login via no password aka password less ssh for this user generates
key aka key pair consist of private key and public key when the public key is installled in the remote server it can connect it with a client 
which has the private key 

👨🏽‍💻usage:To generate private key and public key and store in the home directory 
👨🏽‍💻type:ssh-keygen -t rsa -b 4096 -C "your mail including doubble quotes"
👨🏽‍💻note:This above key generation is quite handy as it require mail you can also use this ssh-keygen -t rsa in order to generate both keys id_rsa is 
the private key and must not be shared to anyone in any case the other id_rsa.pub can be shared as it the public id. 

Once the public key is generated it must be copied to the remote server 
👨🏽‍💻usage:To copy public key to remote server
👨🏽‍💻type:ssh-copy-id -i LOCATION-OF-PUBLIC-KEY USER@SERVER 

👨🏽‍💻usage:To login into remote server
👨🏽‍💻type:ssh SERVER
👨🏽‍💻note:incase no user is specified the connection is obtained by the logged-in user  

SCP ~

Scp allows data to copy and transfer over ssh  

👨🏽‍💻usage:To copy file from remote server 
👨🏽‍💻type:scp LOCATION-OF-FILE-YOU-WANNA-COPY SERVER:DESTINATION-OF-FILE
👨🏽‍💻note:in case you wanna copy directory -pr option is used 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Iptables ~

In a nutshell If the devices are on same network they can be connect to each other to prevent this ip tables are used. 

👨🏽‍💻usage:To list the default rules of iptables 
👨🏽‍💻type:sudo iptables -L
👨🏽‍💻note:The default policy is set to accept traffic

Input chain - network traffic comming into the system 
Output chain - Response given by the server to other system 
Foreward chain - The request further forewarded to other devices 

This is called chain becuase it contails series of terms other things it can filter traffic on the basics of it. Example protocol, port, user etc.

👨🏽‍💻usage:To add rule in iptable  
👨🏽‍💻type:iptables -A INPUT -p PROTOCOL -s SOURCE-IP --dport PORT -j ACTION 
👨🏽‍💻note:The following options are ~

-A = add rule 
-p = protocol
-s = source ip like 420.69.19.45
--dport = destination port
-j = action to take 
-I = used to insert a rule at the top of the ip table 

👨🏽‍💻usage:To add rule in iptable to disable default input chain 
👨🏽‍💻type:iptables -A INPUT -p tcp --dport 22 -j DROP
👨🏽‍💻note:The sequence in which rules are applied are very important if the first one gets executed othe others are ignored 

👨🏽‍💻usage:To delete rule 
👨🏽‍💻type:iptables -D OUTPUT INDEX-OF-THE-RULE


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

cronjob ~

In a nutshell this command is used to automate task for example if wanna pull your git repo every day this task can be automted using cronjob 

👨🏽‍💻usage:To view current automated task on the system by the user 
👨🏽‍💻type:cronjob -e 
👨🏽‍💻note:After this command is executed the cronjob file will be opened in the vi editor here user can delete or modify tasks.

The format of the shedule of the task ~
minute hour day month command-to-be-executed 

for example if want to execute above task this would be like this 
00 21 * * git pull

In the above field * represent that the task is executed every time as per as above example every day every month if you want the task to be automate
every n time /interval-time-in-that-format can be added with * . In case you wanna automate the task relate to specific weekday one more field can 
be added to do so, 1 for monday 2 for tue .. and so on.
The time used here is 24 hour format 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

networking skills required for basic linux 

DNS 

Suppose there are multiple system sharing a common network but a different ip, in that case remembering and entering ip of each system can be a 
nightmare to encouter this dns(domain name system) is used.
For example www.github.com 
www = sub domain
gitbhub = domain
com = top level domain 

After typing the name in the browser the browser will create a query , first it will check in the local cachae if not found it will check on the 
recursive server which will check other servers for example server containing registered name with top level domains after the ip if found it is 
stored in cachae for future use. The local domains can be found under /etc/hosts you can write the ip and the domain name. Run hostname command 
to find the hostname of the device. Setting a DNS server is very beneficial in case there are large number of user and one they usually made changes 
in their domain name. Every system is connected to dns server it can be seen at /etc/resolv.conf  

👨🏽‍💻usage:To add custom domain name limited to local 
👨🏽‍💻type:cat >> /etc/hosts 
👨🏽‍💻note:After this command gets run type your ip and then yor domain name of your choice 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Service management with systemd ~

To make our own service we have to create a service file aka file ending with a extension of .service this service file has to be created under 
/etc/systemd/system/YOUR-SERVICE-FILE 

There are sections in a systemd service file ~
[Unit] - description of service and the service needed to start before this service  
[Service] - Commands and the command options you can also define environmental variabeles it may also conatain a service to shutdown a service 
[Install] - Which target requires this service 
Other example includes [Socket]


Unit section ~
Description - name of the service
After - The service will only start if the services mentioned in this are currently running 
ConditionPathExists = The service will only start if the item provided in this field does not exists another example of fields are Documentation 

example  ~
[Unit]
Description=Launch nukes
After=network.target 
ConditionPathExists=!~/usr/bin/antiBallesticMissile
After creating the service user have to start this service using systemctl : systemctl start NAME-OF-SERVICE-FILE.SERVICE


Service section ~
ExecStart ExecStartPre ExecStartPost ExecStop ExecStopPre ExecStopPost ExecReload ExecReloadPre ExecReloadPost - these all manage service worktime 
and contain the paths for example ExecStart=/SERVICE-LOCATION 
Type - service are of multiple types simple,forking,oneshot,dbus,notify  the type field defines the type of service  
User - this field specifies the user whow want to run this service 
Restart- this filed will amke the service to restart according to user circumstances usually its value is ~ on-failure
RestartSec - this field will make the service to restart after a given interval of time its in second 
There are multiple feilds but for now we are limited to the intro only 

example ~
[Service]
ExecStart=~/usr/bin/nuclearmissiles.service
User=serviceProvideFormyselfakashagarwal
Restart=on-failure

Install section ~ 
Wantedby - The service is reques by which target mainly graphical.target or multiuser.target

example ~
[Install]
Wantedby multiuser.target


Systemd tools to manage service ~

Systemctl was explored earlier to change target of the system this systemctl has multiple usecases including ~
Manage system state 
Start stop restart reload 
Enable disable units 
List and update targets 

👨🏽‍💻usage:To manage service using systemctl
👨🏽‍💻type:systemctl TASK SERVICE-NAME
👨🏽‍💻example:systemctl start launchmissile
👨🏽‍💻note:There are variety of tasks that can be done using systemctl example stop start enable disable reload restart status 

👨🏽‍💻usage:To apply changes to system after making changes in the service file 
👨🏽‍💻type:systemctl deamon-reload

👨🏽‍💻usage:To apply and edit changes at the same time 
👨🏽‍💻type:systemctl edit SERVICE-FILE-NAME.service --full
👨🏽‍💻example:systemctl edit launchmissile.service --full
👨🏽‍💻note:This command will update and apply changes at the same time earlier if we edit the service file we have to use deamon-reload using this 
command will automaticially open the service file into the text editor 

👨🏽‍💻usage:To seee the current status of all the running system services  
👨🏽‍💻type:system list-units --all
👨🏽‍💻note:This command will list all the current runnning units with status description active etc 

👨🏽‍💻usage:To the logs of the services  
👨🏽‍💻type:journalctl -u SERVICE-NAME.service 
👨🏽‍💻note:-b command can be used to view all logs 



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Storage management ~

A partition table is a table that contains data of partitions on a disk.
Types of partitions ~
Primary partitions: These are the most common type of partition and are typically used to hold the operating system.
Extended partitions: These partitions are used to create logical partitions.
Logical partitions: These partitions are created within an extended partition and are used to hold data.
Swap partitions: These partitions are used to increase the amount of memory available to the operating system.

There are two main types of partition table MBR and GPT 

MBR(Master boot record) ~
The first 512 bytes contains the operating system boot loader and device storage partition table. In the 512 bytes of storage it contains the first stage 
of bootloader.
There are maximum of four partitions per drive if there is requirement of more partitions you have to mount extended partition in the place of primary
partitions that extended partition can have upto 4 locical partitions thus you can have maximum of 16 partitions per disk. including partition size 
must not ecceed the size of 2 terabytes.

GUID prtition table (GPT) ~
Globally unique identifiersThis partition scheme is way better than MBR as it can have upto 128 partitions per drive with a maximum storage of 9.4 
zetabytes 


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////